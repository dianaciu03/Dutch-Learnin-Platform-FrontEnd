name: SlimStudie Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [trigger-event]

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Docker Environment Variable
        run: echo "DOCKER_ENV=true" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

  deploy_docker:
    name: Deploy with Docker Compose
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Deploy Services with Docker Compose
        env:
          DOCKER_ENV: true
          REACT_APP_AZURE_CLIENT_ID: ${{ secrets.REACT_APP_AZURE_CLIENT_ID }}
          DOCKER_COSMOSDB_CONNECTION_STRING: ${{ secrets.DOCKER_COSMOSDB_CONNECTION_STRING }}
          DOCKER_COSMOSDB_DATABASE_NAME: ${{ secrets.DOCKER_COSMOSDB_DATABASE_NAME }}
          DOCKER_COSMOSDB_CONTAINER_NAME: ${{ secrets.DOCKER_COSMOSDB_CONTAINER_NAME }}
          DOCKER_RABBITMQ_HOST: ${{ secrets.DOCKER_RABBITMQ_HOST }}
          DOCKER_RABBITMQ_USER: ${{ secrets.DOCKER_RABBITMQ_USER }}
          DOCKER_RABBITMQ_PASSWORD: ${{ secrets.DOCKER_RABBITMQ_PASSWORD }}
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend to start..."
          n=0
          until curl -sSf http://localhost:3001 > /dev/null || [ $n -ge 30 ]; do
            echo "Still waiting... ($n)"
            n=$((n+1))
            sleep 5
          done
  
      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
  
      - name: Install NPM dependencies
        run: npm ci
  
      - name: Run Cypress Tests (headless Chrome)
        run: npm run cypress:run

  push-image:
    name: Push Frontend Image to DockerHub
    runs-on: ubuntu-latest
    needs: deploy_docker

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and Tag Frontend Docker Image
        run: |
          docker build -t slim-studie-frontend:latest .
          docker tag slim-studie-frontend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/slim-studie-frontend:latest

      - name: Push Frontend Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/slim-studie-frontend:latest

  build_and_deploy_to_azure:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest
    needs: deploy_docker
    permissions:
       id-token: write
       contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
           script: |
               const coredemo = require('@actions/core')
               return await coredemo.getIDToken()
           result-encoding: string
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_SAND_068081A03 }}
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "build" # Built app content directory - optional
          github_id_token: ${{ steps.idtoken.outputs.result }}
          ###### End of Repository/Build Configurations ######
